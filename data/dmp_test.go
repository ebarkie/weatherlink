// Copyright (c) 2016 Eric Barkie. All rights reserved.
// Use of this source code is governed by the MIT license
// that can be found in the LICENSE file.

package data

import (
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
)

var testDmpPackets = map[string][]byte{
	"std": {
		0x14,                                           // Page
		0xd4, 0x20, 0xd0, 0x07, 0x19, 0x03, 0x2d, 0x03, // Record 1
		0x19, 0x03, 0x00, 0x00, 0x00, 0x00, 0xa1, 0x75,
		0x12, 0x00, 0xbd, 0x02, 0x17, 0x03, 0x26, 0x33,
		0x00, 0x04, 0x07, 0x08, 0x00, 0x01, 0x19, 0x00,
		0x00, 0x2c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff,
		0xd4, 0x20, 0xee, 0x07, 0x04, 0x03, 0x21, 0x03, // Record 2
		0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x75,
		0x08, 0x00, 0xb9, 0x02, 0x15, 0x03, 0x28, 0x34,
		0x00, 0x01, 0x07, 0x07, 0x00, 0x00, 0x0c, 0x00,
		0x00, 0x2c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff,
		0xd4, 0x20, 0x34, 0x08, 0xfc, 0x02, 0x09, 0x03, // Record 3
		0xf8, 0x02, 0x00, 0x00, 0x00, 0x00, 0xa1, 0x75,
		0x00, 0x00, 0xbd, 0x02, 0x18, 0x03, 0x28, 0x37,
		0x00, 0x01, 0x07, 0x07, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x2c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff,
		0xd4, 0x20, 0x52, 0x08, 0xe2, 0x02, 0xfc, 0x02, // Record 4
		0xe2, 0x02, 0x00, 0x00, 0x00, 0x00, 0xa2, 0x75,
		0x00, 0x00, 0xba, 0x02, 0x19, 0x03, 0x28, 0x42,
		0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x2c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff,
		0xd4, 0x20, 0x98, 0x08, 0xde, 0x02, 0xe4, 0x02, // Record 5
		0xdb, 0x02, 0x00, 0x00, 0x00, 0x00, 0xa6, 0x75,
		0x00, 0x00, 0xba, 0x02, 0x18, 0x03, 0x28, 0x40,
		0x00, 0x00, 0xff, 0xff, 0x00, 0x02, 0x00, 0x00,
		0x00, 0x2c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, // Unused
		0x03, 0xbd, // CRC
	},
}

func BenchmarkDmpUnmarshalBinary(b *testing.B) {
	for n := 0; n < b.N; n++ {
		d := Dmp{}
		d.UnmarshalBinary(testDmpPackets["std"])
	}
}

func TestDmpUnmarshalBinary(t *testing.T) {
	a := assert.New(t)

	d := Dmp{}
	err := d.UnmarshalBinary(testDmpPackets["std"])
	a.Nil(err, "UnmarshalBinary Dmp")

	a.Equal(time.Date(2016, time.June, 20, 20, 0, 0, 0, time.Local),
		d[0].Timestamp, "Timestamp")
	a.Equal(30.113, d[0].Bar, "Barometer")
	a.Equal(158, d[0].WindDirHi, "Wind direction")

	a.Equal(64, d[4].OutHumidity, "Outside humidity")
}

func TestDmpMarshalBinary(t *testing.T) {
	a := assert.New(t)

	da := DmpAft(time.Date(2016, time.June, 20, 20, 0, 0, 0, time.Local))
	p, err := da.MarshalBinary()
	a.Nil(err, "MarshalBinary Dmp")

	a.Equal([]byte{0xd4, 0x20, 0xd0, 0x07}, p[:len(p)-2], "Packet")
}
