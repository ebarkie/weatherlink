// Copyright (c) 2016-2017 Eric Barkie. All rights reserved.
// Use of this source code is governed by the MIT license
// that can be found in the LICENSE file.

package weatherlink

import (
	"fmt"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
)

var testLoopPackets = map[string]Packet{
	"1NoRain": {
		0x4c, 0x4f, 0x4f, 0x00, 0x00, 0x47, 0x01, 0xa7,
		0x75, 0x20, 0x03, 0x29, 0x26, 0x03, 0x01, 0x01,
		0x2f, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0x4e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0x00, 0x00, 0x23, 0x40, 0x01, 0x00, 0x00,
		0xff, 0xff, 0x00, 0x00, 0x27, 0x00, 0x27, 0x00,
		0x28, 0x00, 0x63, 0x00, 0x63, 0x00, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d,
		0x03, 0x06, 0x2c, 0x59, 0x02, 0xf3, 0x07, 0x0a,
		0x0d, 0x0d, 0xf8,
	},
	"1Rain": {
		0x4c, 0x4f, 0x4f, 0x00, 0x00, 0x1c, 0x01, 0x1e,
		0x75, 0x1f, 0x03, 0x28, 0x47, 0x03, 0x00, 0x01,
		0x53, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0x49, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0x00, 0x00, 0x0c, 0x97, 0x00, 0x27, 0x00,
		0x90, 0x6b, 0x09, 0x00, 0x27, 0x00, 0x27, 0x00,
		0x6f, 0x00, 0x56, 0x00, 0x56, 0x00, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d,
		0x03, 0x06, 0x2d, 0x58, 0x02, 0xf3, 0x07, 0x0a,
		0x0d, 0xfe, 0xe0,
	},
	"2BadCrc": {
		0x4c, 0x4f, 0x4f, 0x14, 0x01, 0xff, 0x7f, 0x52,
		0x75, 0x22, 0x03, 0x27, 0xf3, 0x02, 0x01, 0xff,
		0xc6, 0x00, 0x0f, 0x00, 0x17, 0x00, 0x05, 0x00,
		0xca, 0x00, 0xff, 0x7f, 0xff, 0x7f, 0x49, 0x00,
		0xff, 0x5c, 0xff, 0x4f, 0x00, 0x4c, 0x00, 0x4e,
		0x00, 0xf6, 0x02, 0x00, 0x00, 0x00, 0x31, 0x00,
		0x90, 0x6b, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
		0x00, 0x00, 0x31, 0x00, 0x02, 0x00, 0x00, 0xd1,
		0xff, 0xad, 0x73, 0xad, 0x73, 0x6b, 0x75, 0xff,
		0x00, 0x0f, 0x03, 0x09, 0x06, 0x06, 0x00, 0x1e,
		0x00, 0x00, 0x00, 0xff, 0x7f, 0xff, 0x7f, 0xff,
		0x7f, 0xff, 0x7f, 0xff, 0x7f, 0xff, 0x7f, 0x0a,
		0x0d, 0x64, 0x38,
	},
	"2NegativeDewPoint": {
		0x4c, 0x4f, 0x4f, 0x14, 0x01, 0xff, 0x7f, 0x3c,
		0x75, 0x15, 0x03, 0x27, 0x0a, 0x03, 0x00, 0xff,
		0xe5, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x02, 0x00,
		0xe1, 0x00, 0xff, 0x7f, 0xff, 0x7f, 0xff, 0xff,
		0xff, 0x49, 0xff, 0x50, 0x00, 0x4e, 0x00, 0x56,
		0x00, 0x00, 0x00, 0x11, 0xb7, 0x01, 0x00, 0x00,
		0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0xd1,
		0xff, 0x95, 0x73, 0x95, 0x73, 0x52, 0x75, 0xff,
		0x06, 0x12, 0x0d, 0x12, 0x05, 0x12, 0x00, 0x06,
		0x00, 0x00, 0x00, 0xff, 0x7f, 0xff, 0x7f, 0xff,
		0x7f, 0xff, 0x7f, 0xff, 0x7f, 0xff, 0x7f, 0x0a,
		0x0d, 0x09, 0x3c,
	},
	"2NoRain": {
		0x4c, 0x4f, 0x4f, 0x14, 0x01, 0xff, 0x7f, 0x3c,
		0x75, 0x15, 0x03, 0x27, 0x0a, 0x03, 0x00, 0xff,
		0xe5, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x02, 0x00,
		0xe1, 0x00, 0xff, 0x7f, 0xff, 0x7f, 0x45, 0x00,
		0xff, 0x49, 0xff, 0x50, 0x00, 0x4e, 0x00, 0x56,
		0x00, 0x00, 0x00, 0x11, 0xb7, 0x01, 0x00, 0x00,
		0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0xd1,
		0xff, 0x95, 0x73, 0x95, 0x73, 0x52, 0x75, 0xff,
		0x06, 0x12, 0x0d, 0x12, 0x05, 0x12, 0x00, 0x06,
		0x00, 0x00, 0x00, 0xff, 0x7f, 0xff, 0x7f, 0xff,
		0x7f, 0xff, 0x7f, 0xff, 0x7f, 0xff, 0x7f, 0x0a,
		0x0d, 0xa9, 0x29,
	},
	"2Rain": {
		0x4c, 0x4f, 0x4f, 0x14, 0x01, 0xff, 0x7f, 0x52,
		0x75, 0x22, 0x03, 0x27, 0xf3, 0x02, 0x01, 0xff,
		0xc6, 0x00, 0x0f, 0x00, 0x17, 0x00, 0x05, 0x00,
		0xca, 0x00, 0xff, 0x7f, 0xff, 0x7f, 0x49, 0x00,
		0xff, 0x5c, 0xff, 0x4f, 0x00, 0x4c, 0x00, 0x4e,
		0x00, 0xf6, 0x02, 0x00, 0x00, 0x00, 0x31, 0x00,
		0x90, 0x6b, 0x31, 0x00, 0x30, 0x00, 0x31, 0x00,
		0x00, 0x00, 0x31, 0x00, 0x02, 0x00, 0x00, 0xd1,
		0xff, 0xad, 0x73, 0xad, 0x73, 0x6b, 0x75, 0xff,
		0x00, 0x0f, 0x03, 0x09, 0x06, 0x06, 0x00, 0x1e,
		0x00, 0x00, 0x00, 0xff, 0x7f, 0xff, 0x7f, 0xff,
		0x7f, 0xff, 0x7f, 0xff, 0x7f, 0xff, 0x7f, 0x0a,
		0x0d, 0x64, 0x37,
	},
}

func BenchmarkLoopFromPacket(b *testing.B) {
	for n := 0; n < b.N; n++ {
		l := Loop{}
		l.FromPacket(testLoopPackets["1NoRain"])
	}
}

func TestLoopFromPacketRain(t *testing.T) {
	a := assert.New(t)

	l := Loop{}
	err := l.FromPacket(testLoopPackets["1Rain"])
	a.Nil(err, "FromPacket")

	a.Equal(29.982, l.Bar.SeaLevel, "Barometer sea level")
	a.Equal("Steady", l.Bar.Trend, "Barometer trend")
	a.Equal(4.763671875, l.Bat.ConsoleVoltage, "Batter voltage")
	a.Equal(0, l.Bat.TransStatus, "Battery transmitter status")
	a.Equal(0.111, l.ET.Today, "ET today")
	a.Equal(0.86, l.ET.LastMonth, "ET this month")
	a.Equal(0.86, l.ET.LastYear, "ET this year")
	for i := uint(0); i < 7; i++ {
		a.Nil(l.ExtraHumidity[i], fmt.Sprintf("Extra humidity %d", i))
		a.Nil(l.ExtraTemp[i], fmt.Sprintf("Extra temperature %d", i))
	}
	a.Equal([]string{"Cloud", "Partly Cloudy"}, l.Icons, "Icons")
	a.Equal("Increasing clouds with little temperature change.", l.Forecast, "Forecast")
	a.Equal(40, l.InHumidity, "Inside humidity")
	a.Equal(79.9, l.InTemp, "Inside temperature")
	for i := uint(0); i < 4; i++ {
		a.Nil(l.LeafTemp[i], fmt.Sprintf("Leaf temperature %d", i))
		a.Nil(l.LeafWetness[i], fmt.Sprintf("Leaf wetness %d", i))
	}
	a.Equal(284, l.nextArchRec, "Next archive record")
	a.Equal(73, l.OutHumidity, "Outside humidity")
	a.Equal(83.9, l.OutTemp, "Outside temperature")
	a.Equal(0.0, l.Rain.Rate, "Rain rate")
	a.Equal(0.09, l.Rain.Accum.Today, "Rain accumulation today")
	a.Equal(0.39, l.Rain.Accum.LastMonth, "Rain accumulation this month")
	a.Equal(0.39, l.Rain.Accum.LastYear, "Rain accumulation this year")
	a.Equal(0.39, l.Rain.Accum.Storm, "Rain accumulation this storm")
	a.Equal(time.Date(2016, 6, 23, 0, 0, 0, 0,
		time.Now().Location()), l.Rain.StormStartDate, "Storm start date")
	for i := uint(0); i < 4; i++ {
		a.Nil(l.SoilMoist[i], fmt.Sprintf("Soil moisture %d", i))
		a.Nil(l.SoilTemp[i], fmt.Sprintf("Soil temperature %d", i))
	}
	a.Equal(151, l.SolarRad, "Solar radiation")
	a.Equal(time.Date(time.Now().Year(), time.Now().Month(), time.Now().Day(), 6, 0, 0, 0,
		time.Now().Location()), l.Sunrise, "Sunrise")
	a.Equal(time.Date(time.Now().Year(), time.Now().Month(), time.Now().Day(), 20, 35, 0, 0,
		time.Now().Location()), l.Sunset, "Sunset")
	a.Equal(1.2, l.UVIndex, "UV index")
	a.Equal(339, l.Wind.Cur.Dir, "Wind direction")
	a.Equal(0, l.Wind.Cur.Speed, "Wind speed")
	a.Equal(0.0, l.Wind.Avg.Last10MinSpeed, "Wind speed 10 minute average")
}

func TestLoopFromPacketNoRain(t *testing.T) {
	a := assert.New(t)

	l := Loop{}
	err := l.FromPacket(testLoopPackets["2NoRain"])
	a.Nil(err, "FromPacket")

	a.Equal(30.034, l.Bar.Altimeter, "Barometer altimeter")
	a.Equal(30.012, l.Bar.SeaLevel, "Barometer sea level")
	a.Equal(29.589, l.Bar.Station, "Barometer station")
	a.Equal("Rising Slowly", l.Bar.Trend, "Barometer trend")
	a.Equal(69.0, l.DewPoint, "Dew point")
	a.Equal(0.014, l.ET.Today, "ET today")
	a.Equal(80.0, l.HeatIndex, "Heat index")
	a.Equal(39, l.InHumidity, "Inside humidity")
	a.Equal(78.9, l.InTemp, "Inside temperature")
	a.Equal(73, l.OutHumidity, "Outside humidity")
	a.Equal(77.8, l.OutTemp, "Outside temperature")
	a.Equal(0.0, l.Rain.Rate, "Rain rate")
	a.Equal(0.0, l.Rain.Accum.Last15Min, "Rain accumulation last 15 minutes")
	a.Equal(0.0, l.Rain.Accum.LastHour, "Rain accumulation last hour")
	a.Equal(0.0, l.Rain.Accum.Last24Hours, "Rain accumulation last day")
	a.Equal(0.0, l.Rain.Accum.Today, "Rain accumulation today")
	a.Equal(0.0, l.Rain.Accum.Storm, "Rain accumulation this storm")
	a.Equal(439, l.SolarRad, "Solar radiation")
	a.Equal(86.0, l.THSWIndex, "THSW Index")
	a.Equal(1.7, l.UVIndex, "UV index")
	a.Equal(229, l.Wind.Cur.Dir, "Wind direction")
	a.Equal(0, l.Wind.Cur.Speed, "Wind speed")
	a.Equal(1.1, l.Wind.Avg.Last2MinSpeed, "Wind speed 2 minute average")
	a.Equal(0.6, l.Wind.Avg.Last10MinSpeed, "Wind speed 10 minute average")
	a.Equal(225, l.Wind.Gust.Last10MinDir, "Wind gust 10 minute direction")
	a.Equal(0.2, l.Wind.Gust.Last10MinSpeed, "Wind gust 10 minute speed")
	a.Equal(78.0, l.WindChill, "Wind chill")
}

func TestLoopFromPacketNegativeTemp(t *testing.T) {
	a := assert.New(t)

	l := Loop{}
	err := l.FromPacket(testLoopPackets["2NegativeDewPoint"])
	a.Nil(err, "FromPacket")

	a.Equal(-1.0, l.DewPoint, "Dew point")
}
